---
layout: post
title:  Java 与 Haxe 语法对比
date:   2014-03-29 11:50:10
categories: haxe
notes: full
---

下边将使用 `Haxe/Neko` 平台来和 `Java` 对比.因为都是虚拟机

<!-- more -->

### HelloWorld

<div class="row">
  <div class="col-md-6 java">
  <h4>Java</h4>

{% highlight Java %}
public class Helo {
  public static void main(String arg[]) {
    System.out.println("Hello,Java");
  }
}
//文件保存为: Helo.java
//编译: > javac Helo.java
//运行: > java Helo
//输出: > Hello,Java
{% endhighlight %}

  </div>

  <div class="col-md-6 hx">
  <h4>Haxe</h4>

{% highlight js %}
class Helo {
  public static function main() {
    Sys.println("Hello,Haxe/Neko");
  }
}
//文件保存为: Helo.hx
//编译: > haxe -main Helo.hx -neko Helo.n
//运行: > neko Helo.n
//输出: > Hello,Haxe/Neko
{% endhighlight %}

  </div>
</div>

<hr />


### 构造函数和方法重载

<div class="row">
 <div class="col-md-6 java">
 <h4>Java</h4>
{% highlight java %}

public class TheClass {
    // 和 C++ 一样.构造方法绝对不能写 void,
    public TheClass(){
        return;
    }
    public TheClass(int n){ // 方法重载.
        return;
    }

    //混乱的, 但这只是一个 void 普通方法,而非 构造函数
    public void TheClass(){
        return;
    }

    public static void main(String[]a){
        TheClass n = new TheClass();
        n.TheClass(); //调用 定义为 void 的普通方法
    }
}
{% endhighlight %}
 </div>

 <div class="col-md-6 hx">
  <h4>Haxe</h4>
{% highlight js %}

class TheClass {
    public function new(){
    }
    // haxe 使用 new 方法作为构造函数
    // 为了避免混乱 haxe 在语言设计上没有方法重载.
    // 可选参数 or 函数式变体(enum) 能完成你想要的

    public static function main(){
        var inst = new TheClass();
    }
}

{% endhighlight %}
 </div>
</div>

<hr />

### 基础类型

<div class="row">
  <div class="col-md-6 java">
  <h4>Java</h4>

{% highlight java %}
byte    // 8  -128 ~ 127
short   // 16 -32768 ~ 32767
int     // 32 -2^31 ~ 2^31-1
long    // 64
float   // 32
double  // 64
boolean
char
void
{% endhighlight %}
  </div>

  <div class="col-md-6 hx">
  <h4>Haxe</h4>

{% highlight js %}
Bool
Int
Float
Void
{% endhighlight %}
  </div>
</div>

<hr />

### 初使化类

<div class="row">
 <div class="col-md-6 java">
 <h4>Java</h4>
{% highlight java %}
public class Test {

    public Test(){
        System.out.println("new instance");
        System.out.println(num + "\n");
	}

    // 和 haxe 不一样的是 num 会先被赋值为 100, 然后再被 static 块中的代码改为 200, 最后为 200
    public static int num = 100;

    // static 代码块, 同样只运行一次
    static{
        num = 200;
        System.out.println("static code block");
    }

    public static void main(String arg[]) {
        new Test();
        new Test();
    }
    /* 输出:
     static code block
     new instance
     200

     new instance
     200
    */
}
{% endhighlight %}
 </div>

 <div class="col-md-6 hx">
  <h4>Haxe</h4>
{% highlight js %}
class Test{
    public function new(){
        trace("new instance");
        trace(num + "\n");
    }

    //  num 会被 __init__ 先赋值为 200, 然后被赋值为 100; 即最后的值为 100;
    static var num:Int = 100;

    // __init__ 方法　只会运行一次
    static function __init__(){
        trace("static __init__");
        num = 200;
    }

    public static function main(){
        new Test();
        new Test();
    }

    /* 输出:
     static __init__
     new instance
     100

     new instance
     100
    */
}
{% endhighlight %}
 </div>
</div>

<hr />

### 加载源生方法

<div class="row">
 <div class="col-md-6 java">
 <h4>Java</h4>
{% highlight java %}

// 使用 native 关键字描述方法体, 经常用于加载 c 语言库
public class HelloJni{

	public native String  stringFromJNI();

	static{
		System.loadLibrary("hello-jni");
	}
}

{% endhighlight %}
 </div>

 <div class="col-md-6 hx">
  <h4>Haxe</h4>
{% highlight js %}

// 使用　extern　关键字描述外部类
extern class Fs {
    static function rename(oldPath:String, newPath:String, callback:Error->Void):Void;
}

// 注: 对于不同的平台，调用源生类或方法有着各自需要注意的细节...
// 目前用在源生 JS 或 CPP 的库比较多.
{% endhighlight %}
 </div>
</div>

<hr />


### 空的

<div class="row">
 <div class="col-md-6 java">
 <h4>Java</h4>
{% highlight java %}

// 替换这里的内容

{% endhighlight %}
 </div>

 <div class="col-md-6 hx">
  <h4>Haxe</h4>
{% highlight js %}

// 替换这里的内容

{% endhighlight %}
 </div>
</div>

<hr />

### 空的

<div class="row">
 <div class="col-md-6 java">
 <h4>Java</h4>
{% highlight java %}

// 替换这里的内容

{% endhighlight %}
 </div>

 <div class="col-md-6 hx">
  <h4>Haxe</h4>
{% highlight js %}

// 替换这里的内容

{% endhighlight %}
 </div>
</div>

<hr />

### NDK

留空以后再添加...



### 简单记些 Java

[15分钟　java 快速入门](https://github.com/jdonaldson/learnxinyminutes-docs/blob/master/java.html.markdown)

* 变量定义

  ```java
  // 感觉和 C 语言很像
  int i = 10;
  char c = 'A';
  char [] cs = {'A','B','C'};
  String str = "Helo";
  Object [] obj = new Object[3]; // 初使化后数组长度必须为已知;
  obj[0] = new Object();
  ```

* `java.lang` 这个包不需要导入就可以直接使用.

* `java.lang.Object`

  > 除了Java的基础类型,所有类型都是继承于 Object,包括 String. 很多数据类型必须为 Object.
  >
  > 感觉很像 AS3. 在 AS3 中 Object 是所有 类 的基类.

* `final` 关键字

  ```java
  // final 除了 有 const 的行为
  // 还可以改变 一个变量作用域,叫做 final local variable
  // 下边示例中的 @Override run 方法,并不可以访问 其所在的局部变量
  // 但是局部变量加上 finnal 关键字后.就可以了
  public void foo() {
  	final String x = "hello";
  	String y = "there";
  	Runnable runnable = new Runnable() {
  		@Override public void run() {
  			System.out.println(x); // This is valid
  			System.out.println(y); // This is not
  		}
  	};
    runnable.run();
  }
  // 这个示例同样展示了 Java 可以在 实例化时,写 override 方法
  ```

<br />





