---

layout: post
title:  neko(虚拟机)
date:   2014-05-21 10:10:08
categories: haxe

---

一些示例:

 * [处理 Zip 和 Tar](http://old.haxe.org/doc/neko/zip)

 * [使用 threadserver](http://old.haxe.org/doc/neko/threadserver)

 * 可能需要参考 http://nekovm.org/doc 的文档获得一些细节, 比如源码: `__dollar__print`

<!-- more -->


### package neko

这里只是描述几个类, 在 cpp 包中都有相对应的类(只少数几个没有)

 * `vm.Ui` 线程同步运行某一函数


#### vm.Thread

多线程示例: http://old.haxe.org/doc/neko/threads , 包含了 Deque, Mutex ;

 * `sendMessage( msg : Dynamic ):Void` 注意简单数据类型传拷贝,复杂类型传引用. 你可以直接传递线程

	```haxe
	var t1 = Thread.create(fn);
	t1.sendMessage(Thread.current());	
	
	function fn(){
		var main:Thread = Thread.readMessage(true);
		//......
	}
	```

 * `readMessage(block = true):Dynamic` 读取 sendMessage 传递的变量 


#### vm.Deque 

**重要:** `pop(block)` 当 block 为 true, 将为阻塞模式, 也就是说调用 pop(true) 时, 当没有元素可用于pop( *类似于调用空数组的pop方法* ), 将阻塞当前进程直至至有元素可以弹出. 用于多线程编程.

```haxe
var dq = new Deque<Int>();
		
Thread.create(function() {
	Sys.sleep(2);
	dq.add(100);
});
trace("if block is true, and has no value can be pop()");
trace(dq.pop(true));
trace("end");
```

#### vm.Mutex

http://old.haxe.org/api/neko/vm/mutex, 示例可以参考上边 Thread 处的示例.

总来来说 Mutex 是也一个阻塞, 当 `mutex.acquire()` 时, 如果同个实例中前边已经调用,那么将阻塞等待释放.

#### vm.Lock

`wait(?sec)`用于阻塞进程.直到已经到了指定时间或者其它进程调用了 `release()`. 示例显示了 wait 的时间已过而退出 阻塞, 

```haxe
var lk = new Lock();
Thread.create(function() {
	Sys.sleep(2);
	trace("sub thread call release!");
	lk.release();
});
lk.wait(1);
trace(lk);
Sys.sleep(3);
```

#### vm.Tls

作为 thread 的局部变量, 为解决多线程程序的并发问题提供了一种新的思路,  示例见 `std/haxe/io/FPHelper.hx`

声明静态绑定线程的本地对象和变量时必须遵守下列原则：原文见 https://msdn.microsoft.com/zh-cn/library/6yh4a9k1.aspx

 * 只能应用于 数据声明和定义, 不能用于函数声明或定义

 * 只能用在具有　static 作用域的数据项上(haxe 的 static 只能作用于类字段)


#### net.Poll

http://old.haxe.org/api/neko/net/poll

轮询多个非阻塞 socket 为一个线程.

#### vm.Loader

Loader(加载器) 可以用于动态(运行时)地从 NDLL 库中加载 primitives(调用代码的胶水函数).

Loader 可以用于动态地加载其它 neko 模块(`.n`文件)，
默认的 Loader 首先在其 cache(inst.getCache) 中查找, 
然后在路径(inst.getPath)和当前路径查找指定的名称,从路径中查找的模块会被立刻执行

Loader 可用于沙箱安全。当模块已经加载到指定的 loader， 
这个 loader可以管理被加载的模块安全通过过滤哪些 primitives 可以被加载

 > 通常通过 `Loader.local()` 获得当前 neko Loader(加载器), 然后 `loader.getCache()` 取得这个 loader 下的所有模块, 例如: `app.n => [Module Object]`

 > loader.loadModule, 如果 cache 中不在,则将在路径中搜索指定模块并在成功加载之后立刻执行.

 > loader.primitive 是用来加载 C 代码端生成的胶水函数的, 而非 haxe 生成的.


#### vm.Module

Neko 虚拟机的可执行文件, 一个 Module 对应一个 `.n` 文件

静态方法:

 * `static local():Module`: 返回当前Module实例

 * `static read(i:Input, l:Loader):Module`: 从 Input 中读取 Module 到指定的 Loader, Module 将被初使化但还没有执行

 * `static readBytes(i:Byte, l:Loader):Module`: 同上,初使化的模块还没有执行

 * `static readPath(name:String, path:Array<String>, l:Loder):Module`: 在指定的路径(path)中加载指定模块(name),初使化的模块还没有执行。

 * `static readGlobalsNames(i:Input):Array<String>`: 

一些成员方法: 这些方法不需要过多的关注,

 * `execute():Dynamic`: 一个模块可以被执行多次, 每次都会初使化。 注意: 这个方法 **并非** 返回 Sys.exit(i) 的值, 因为被加载的模块如果调用了 Sys.exit 则所有的模块将退出, 即不会再执行后边的任何代码. 

 * `getExports():Map<String,Dynamic> `, `exportsTable():Dynamic` 二个方法, 前者通过 Reflect 将后者的返回用 Map 进行了包装。除了`__module`字段, 其它所有字段需要在 **执行后** 才有值

  - `__module`: TODOS(未知的抽像类型)

  - `__classes`: 包含所有haxe类,可以直接引用这些值或调用这些函数， 通过这个字段调用其中的方法,比如 main, 除非再次运行 `execute()`, 否则值将被保留，d而不会初使化

  - `__unserialize` ??? 对应为一个函数,似乎不用理会

 * `globalsCount():Int, setGlobal(n:Int, v:Dynamic):Void, getGlobal(n:Int):Dynamic`: int 值分别对应组成neko Module的每个元素(字符串, 函数......等等)


### std.ndll

通过 `neko.Lib.load("std",@name,@args)` 加载的方法, 源码在: https://github.com/HaxeFoundation/neko/tree/master/libs/std ,

 * `print_redirect(print:Dynamic->Void):Void`

<br />
<br />