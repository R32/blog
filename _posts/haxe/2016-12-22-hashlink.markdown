---
layout: post
title:	hashlink
date:	2016-12-22 06:55:21
categories: haxe
---

<http://hashlink.haxe.org/>

### 简介

大致来说由于机制不同，不能简单地把 hl 看成是 neko 的升级版。 <http://haxe.org/blog/hashlink-indepth-part-2/>

haxe 代码编译成 `.hl` 字节码然后使用 hl 来运行用于快速开发（development）,

```bash
# 编译
haxe -hl output.hl -main MyApp

# 使用 hl虚拟机运行字节码
hl output.hl
```

> 注: 编译成 .hl 字节码或 .c, 需要 haxe 3.3 或更高(推荐下载 github 上的 night build 版本),

<!-- more -->

而发布（release）的时候可以编译成 c 代码以获得更好的性能（我倒是没感觉到有任何性能的提升...）

```bash
# 生成 c 代码
haxe -hl output.c -main MyApp

# 使用 gcc 编译
gcc -o myapp output.c hlc_main.c -Lhl
```

> 使用 vs2013 1) 从已存在文件新建项目，选择 console 程序。2) 将 hl/src, 和编译出的 c 文件的目录添加到 include.
>
> 3) 设置好 libhl.lib, 例: `#pragma comment(lib, "libhl.lib")`, 4) 将编译出的主 out.c 添加到"源码"

编译现存的 c 库与 hashlink 一起使用则建议参考 include 和 libs 这二个目录的源码


### 编译虚拟机

以下使用 vs2013 社区版, 需要自已下载 sdl, openal 等放至到 include 目录 (参看各 readme 文件)，

- directx 丢失了 [d3dcompiler_47.dll](http://www.catalog.update.microsoft.com/Search.aspx?q=KB4019990), 通过链接更新 KB4019990 补丁即可.

- [sdl](https://www.libsdl.org/) download the Development Libraries

- [openal](http://openal-soft.org/) Download the Win32 binaries

  > 需要 Openal32.dll（可能需要另外单独下载） 以及 soft_oal.dll（openal-soft-1.17.2-bin.zip内有提供）

- [libuv 中文手册](https://github.com/forhappy/uvbook)

* 打开 hl.sln，在 "解决方案配置" 的下拉选项中选择 "release2013"(有"release2013/release/debug"), 最后获取 release2013 目录下的 hl.exe 和所有 .hdll 和 libhl.dll

如果不想自已编译可在 github 上的 release 页面中找到。

### Tips

* 如何在 C 中嵌入虚拟机可以参考 `src/main.c` 文件

* 例如 `@:hlNative("fmt","png_decode")`, 表示位于 fmt.hdll 库中的 png_decode 方法, 需要自已参考 `libs/fmt/fmt.c` 的统一格式

* libs 下有个 sdl 库, 可添加到 haxelib，使用 hlsdl 作为库名

* 对于 hl.UI, 实际上只有 dialog 还算比较实用, WinLog 只是用来测试的(参看 sdl 中的某一函数), 因为它并没有和 MSG 相关东西, 所以应该使用 sdl 来创建窗口， 因为 hl.UI 仅适用于 windows 平台（未来会实现多平台）

* 在 hl 包下的 haxe 代码, 有时候你可以看到 `$new` 这种以美元字符开头的代码, 可参考 `genhl.ml`

&nbsp;
&nbsp;

## misc

### 字符串

HL 中的字符串由 hl.bytes 构成, 字符串的编码通常为 `wchar_t`, 即 ucs2.

### 类型

基础类型

* `void`: 空, 因此没有对应的真实值
* `u8`: unsigned 8, (0-255)
* `ui16`: unsigned 16(0-65535)
* `i32`: signed 32(-2147483648-2147483647)
* `bool`: (true or false)
* `f32`: 32位单精度浮点数
* `f64`: 64位双精度浮点数

接下来的将表现为指针的形式, （由 gc 管理内存申请的各种数据结构）

* `bytes`: 连续字节(类似于 c 语言的 `char*`), 可自由读写（没有附加边界检测）。

  **Tips:** 如果 c 端的参数是 `hl.bytes` 类型, 可直接传 `haxe.io.bytes`, 编译器会自已转换

* `dyn`: 在运行时可以将任何值传递给 dynamic 类型（装箱操作）,它的运行时真实类型可通过 `gettype` 获得.

* `ret fun(args)`: 在 hl 中为严格的函数类型, 可以是 `closure` 或一个函数。

* `array`: 数组, 低层数组并非严格类型并且无边界检测, 但是有固定长度

* `object`: 固定了结构, 相当于 haxe 中的 class

* `dynobj`: 动态结构，性能不如 object, 但可以添加或移除某一字段。 对应 haxe 中的匿名结构

  底层由一个已排好序（通过计算字段名的 hash 值）的数组所实现, 因此搜索某一字段的时间复杂度为 `O(log n)`

* `virtual(fields...)`: 一种灵活的结构, 建议看原文档

* `enum(name)`: 一个 enum 值, 可以有不同的构造器以及可选的参数

* `ref(T)`: 引用类型, 它应该是某个函数的参数类型, 这个类型能自动创建, 有些 c 端的函数的参数类型是指针类型, 因此也可以用它

   ```haxe
   static function main() {
       var i = 0;
       inc(i);   // 参数必须是变量, 由于变量可以随意加 Meta, 因此可写成 inc(@OUT i) 以让代码更可读
       trace(i); // 1
   }
   static function inc(i: hl.Ref<Int>) { i.set(i.get() + 1); }
   ```
* `null(T)`: 一个可以为 null 的基础类型（T的类型必须是基础类型）

* `type`:

* `abstract(name)`: 抽象类型, 由 c 端定义才可以在 haxe 这边访问

  ```c
  /* src/std/socket.c */
  #define _SOCK	_ABSTRACT(hl_socket)
  ```

个人补充:

* `vclosure*`: haxe function 在 c 端的表现形式

&nbsp;

haxe 与 HL 类型:

  haxe  |  c
--------|-------
Void    |  void
Int     |  i32
Bool    |  bool
String  |  string
Float   |  f64
Single  |  f32
Dynamic |  dyn

haxe 的 anonymous structure or interface instances 以 c 端表现为 `virtual(...)`

&nbsp;

#### Boxing

当基础类型以及(`bytes, type, ref, abstract, enum`) 转换到 `dyn`（通过操作码 `todyn`） 类型时将会有 Boxing(装箱操作).


### gc

从 gc 中申请内存（不保证内容的正确性）：

* `hl_gc_alloc_noptr`: 用于基础类型（如字节序节: `unsigned char*`),或者被装箱的基础类型(dynamic), 或者 c 端任意不会被 haxe 所引用的类型

  实际上 `(vclosure*), (vdynobj_proto*)` 也都是通过这个来申请

* `hl_gc_alloc`: dynamic, 如 `(vdynobj *), (vvirtual *)`

* `hl_gc_alloc_raw`:

* `hl_gc_alloc_finalizer`: 结构的第一个字段必须指向 `(void(*)(void *)` 以便 gc 在清除时调用, 参考 file.c 的 hl_file_open

### 其它

> 一个 gbk 编码的转换 <https://github.com/qqee/qqee_clib>, 但是已经用不到了, 因为设置 setlocale 即可，不需要做转换

**To Be Continued...**
