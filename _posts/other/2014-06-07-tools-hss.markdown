---

layout: post
title:  hss
date:   2014-06-07 9:21:10
categories: other

---

 [hss](https://github.com/ncannasse/hss) 是一个类似于 less 或 sass 的 动态样式表语言.但是更加轻量及简单. 基于 neko 平台. 最新的 1.4 版本需要自已编译. 编译参考 Makefile 文件. 
 
<!-- more -->

### 使用方法

```bash
# 在与 myfile.hss 相同目录,生成 myfile.css
hss myfile.hss


# 在名为 dir 的目录生成 myfile.css
# 注意:  目录需要先创建, 目录名必须以斜线 / 结尾
hss -output dir/ myfile.hss
```


### 小贴士

由于每次修改 HSS 文件, CSS 文件需要重新生成。如果网站本身自动运行 HSS，当检测到 HSS 文件发生更改的时候，并显示任何出现的错误。

 > 备注: 我好像找不到能监控某一文件发生改动的工具.

### 语法

hss 支持有效的 CSS 语法，所以对于每个在 HSS 文件的解析过程中发生的错误，它将显示错误，指示所在文件和行号。

hss有较严格的语法检查，比如:

```css
pre {
    color : #FF0000
}
```

虽然这是一个有效的css, 但是在 hss 中,将会得到一个错误: 缺少一个分号 ;

```bash
myfile.hss:3: Unexpected '}' maybe missing ;
```




#### 属性变量

HSS 可以将属性变量添加到 CSS 语法, 变量是很好的方式, 特别在修改颜色值时.

声明一个变量使用关键字 `var`, 引用变量使用 `$` 符号

```bash
var mycolor = #1111AA;
var myfont = "Trebuchet MS", Arial, sans-serif;

body {
    color : $mycolor;
    font : $myfont;
}
```




#### 块变量

块变量是非常有用的用于共享一些无关规则之间的"行为"。他们可以用来提高 CSS 文件的组织的方式，使它更容易测试的样式更改。

```bash
var nomargin = { margin : 0px; padding : 0px; }

pre {
    $nomargin;
    color : #FF0000;
}
```




#### 块嵌套

```bash
.faq {
    color : #BC683C;
    .form {
        width : 100px;
        textarea {
            width : 100%;
            height : 80px;
        }
        .name {
            font-weight : bold;
        }
    }
    ul {
        margin-left : 20px;
        margin-bottom : 20px;
    }
}
```

将变成为:

```css
.faq {
    color: #BC683C;
}

.faq .form {
    width: 100px;
}

.faq .form textarea {
    width: 100%;
    height: 80px;
}

.faq .form .name {
    font-weight: bold;
}

.faq ul {
    margin-left: 20px;
    margin-bottom: 20px;
}
```



#### 注释

除了 css 默认的 `/* ... */` , 还支持 单行注释 `// ....`



#### CSS 验证

除了验证语法, HSS 还将会检查 css 属性名 以及 属性值 的有效性.

```css
/* 注意 font-weight 的书写错误, 多了一个字母 t  */
pre{ font-weightt: bold; }

/* bald 不是 font-weight 的有效的属性值 */
pre{ font-weight: bald;}
```

HSS 还强制一些好的 CSS 做法

 * 属性声明必须以 分号(;) 结尾

 * Url 必须写在引号之间: url(img.gif) 应该改为 url("img.gif")

 * background 属性有一个固定的顺序, 如下:

	```bash
	background: [color] [url] [repeat] [scroll|fixed] [horiz.] [vert.]
	```



#### CSS 规则

HSS 源文件的 Rules.nml 文件中列出的整个的 CSS 属性规则，用于检查属性值的正确性。你可能想要为您自己的需要对其进行修改。




#### 选译器

[CSS 选译器](http://www.w3.org/TR/selectors/#selectors) , [中文 w3school css 选译器](http://www.w3school.com.cn/cssref/css_selectors.asp)

 * `E`: 支持

 * `E F`: 支持

 * `E > F`: 支持

 * `E ~ F`: 支持

 * `E + F`: 支持

 * `DIV.warning`: 支持

 * `E #myid`: 支持

 * `E:first-child, E:link, E:hover` and other CSS2 and 3 pseudo-classes selectors are supported (except the ones that takes an argument)

 * `E[foo], E[foo=value], E[foo|=value], E[foo~=value], E[foo^=value], E[foo$=value], E[foo*=value]`: supported


#### 自定义的属性

 当使用 **非标准** CSS 属性时,比如添加一些自定义的属性 或用于 IE hack 时.使用 `CSS()`, 小示例:

```bash
.image{
	my-special-property: CSS('"some spcific value"');
}


.page CSS("h1.nth-child(2)"){
	color: red;
}
```

将变成为:

```css
.image {
	my-special-property : "some spcific value";
}
.page h1.nth-child(2) {
	color : red;
}
```



#### 运算符

注意: 不允许二个不同单位(例如: 50px + 3em) 之间的运算符操作

```bash
var scale = 3;
.big {
    width : 50px + 20px;
    height : 30px * $scale;
    color : #FF0000 * 0.7;
}
```



#### hasks

 HSS 添加了一些小的 hacks

 * opacity: 将生成相应的 IE 属性 filter alpha

 * border-radius(and border-top-left-radius, etc) : 将生成 -moz-border-radius 和 -webkit-border-radius 用于支持 Firefox and Chrome/Safari.

 * box-shadow： 将同样生成 -moz-box-shadow and -webkit-box-shadow 以支持 Firefor 和 Chrome/Safari

 * text-shadow: HSS 支持, 但不显示任何内容对于 IE6-8

 * display: inline-block; 将添加 IE 修复以获得正确的支持

 * color: rgba(r, g, b, a); 将添加固定颜色默认值，当浏览器不支持rgba. 例: `rgba(100,80,60,0.5);`

 * background-color: rgba(r, g, b, a); 将添加固定颜色默认值，当浏览器不支持rgba，并且还添加一些 IE6-8 hacks，以正确显示透明背景颜色。唯一的缺点是块背景图像将显示下面的背景色。

 * background : linear-gradient(#color1,#color2) : 支持所有浏览器, 包括 IE6-8 **New in 1.4**

 * hss-width and hss-height: 将生成width和height，将减去 padding 和 border 的值.

 * @include('some css string'): 添加 css 字符串. either at the top level or instead of an attribute, this will include raw CSS string in the output, prefixed with the hierarchy classes if any **New in 1.4**



